name: Build and Release

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean
  
  # Weekly schedule (every Sunday at 2 AM UTC)
  schedule:
    - cron: '0 2 * * 0'
  
  # On new tags
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      version: ${{ steps.get-version.outputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            # For scheduled runs, use date-based version
            echo "version=weekly-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.get-version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=schedule,pattern=weekly-{{date 'YYYYMMDD'}}
            type=ref,event=tag
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-binaries:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: write
    
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: linux
            arch: arm
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
          - os: windows
            arch: arm64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          VERSION=${{ needs.build-and-push.outputs.version }}
          BINARY_NAME=dbbackup-${{ matrix.os }}-${{ matrix.arch }}
          
          if [ "${{ matrix.os }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          go build -ldflags="-w -s -X main.version=${VERSION}" -o "${BINARY_NAME}" main.go
          
          # Create archive
          if [ "${{ matrix.os }}" = "windows" ]; then
            zip "${BINARY_NAME%.exe}.zip" "${BINARY_NAME}"
            echo "ASSET_NAME=${BINARY_NAME%.exe}.zip" >> $GITHUB_ENV
          else
            tar -czf "${BINARY_NAME}.tar.gz" "${BINARY_NAME}"
            echo "ASSET_NAME=${BINARY_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: ${{ env.ASSET_NAME }}

  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-push, build-binaries]
    permissions:
      contents: write
    
    if: >
      github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true' ||
      github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          path: ./artifacts
          merge-multiple: true

      - name: Generate changelog
        id: changelog
        run: |
          VERSION=${{ needs.build-and-push.outputs.version }}
          echo "# Release ${VERSION}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## What's Changed" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag
          if git describe --tags --abbrev=0 2>/dev/null; then
            LAST_TAG=$(git describe --tags --abbrev=0)
            echo "### Commits since ${LAST_TAG}:" >> CHANGELOG.md
            git log --oneline ${LAST_TAG}..HEAD | sed 's/^/- /' >> CHANGELOG.md
          else
            echo "### Initial release" >> CHANGELOG.md
            git log --oneline | head -10 | sed 's/^/- /' >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "## Docker Images" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "- \`ghcr.io/${{ github.repository }}:${VERSION}\`" >> CHANGELOG.md
          echo "- \`ghcr.io/${{ github.repository }}:latest\`" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Multi-arch support:" >> CHANGELOG.md
          echo "- linux/amd64" >> CHANGELOG.md
          echo "- linux/arm64" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Installation" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "\`\`\`bash" >> CHANGELOG.md
          echo "# Docker" >> CHANGELOG.md
          echo "docker pull ghcr.io/${{ github.repository }}:${VERSION}" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "# Binary (replace OS and ARCH as needed)" >> CHANGELOG.md
          echo "wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/dbbackup-linux-amd64.tar.gz" >> CHANGELOG.md
          echo "tar -xzf dbbackup-linux-amd64.tar.gz" >> CHANGELOG.md
          echo "chmod +x dbbackup-linux-amd64" >> CHANGELOG.md
          echo "sudo mv dbbackup-linux-amd64 /usr/local/bin/dbbackup" >> CHANGELOG.md
          echo "\`\`\`" >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-and-push.outputs.version }}
          name: Release ${{ needs.build-and-push.outputs.version }}
          body_path: CHANGELOG.md
          files: ./artifacts/*
          draft: false
          prerelease: ${{ contains(needs.build-and-push.outputs.version, 'alpha') || contains(needs.build-and-push.outputs.version, 'beta') || contains(needs.build-and-push.outputs.version, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push, build-binaries, create-release]
    if: always()
    
    steps:
      - name: Workflow Summary
        run: |
          echo "## 🚀 Build and Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.build-and-push.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Jobs:" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Build & Push: ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Binary Build: ${{ needs.build-binaries.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.create-release.result }}" != "skipped" ]; then
            echo "- GitHub Release: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Images:" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository }}:${{ needs.build-and-push.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ Supported Architectures:" >> $GITHUB_STEP_SUMMARY
          echo "- linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- Binary releases for Linux, macOS, Windows (amd64/arm64)" >> $GITHUB_STEP_SUMMARY